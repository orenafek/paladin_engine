"""
__     __        _  _      _         _
\ \   / /  __ _ | |(_)  __| |  __ _ | |_   ___   _ __
 \ \ / /  / _` || || | / _` | / _` || __| / _ \ | '__|
  \ V /  | (_| || || || (_| || (_| || |_ | (_) || |
   \_/    \__,_||_||_| \__,_| \__,_| \__| \___/ |_|

This program validates a message generated by another program.
The message consists of packets, each be in the following format:
Packet: <Magic |4|><Length|2|><Content|Length|>

The entire sequence is in the following format:
Sequence: <Packet><Seperator><Packet><Seperator>...<Packet><Seperator><EndBarker><Entire message Checksum>
"""

import hashlib
from collections import OrderedDict


def validate(s: str):
    chsms = OrderedDict()
    i = 0
    cursum = 0
    lchunk = ''
    while True:
        cntr = 4
        chunk = s[i:i + cntr]
        i += cntr

        if chunk == 'X@y$':
            continue

        if lchunk and lchunk != chunk:
            chsms[lchunk] = cursum
            cursum = 0

        if chunk == 'A#<B':
            break

        lchunk = chunk
        cntr = int(s[i] + s[i + 1])
        i += 2

        chunk = s[i: i + cntr]
        i += cntr

        c = 0xFFFF
        for char in chunk:
            c ^= ord(char)
            for _ in range(8):
                if c & 0x0001:
                    c >>= 1
                    c ^= 0xA001
                else:
                    c >>= 1
        cursum += c

    chunk = ''.join(map(str, chsms.values()))
    calc = hashlib.md5(chunk.encode()).hexdigest()
    f = ''.join([s[i + _] for _ in range(32)])

    return str(f) == str(calc)


def main():
    result = True
    with open('/Users/oren.afek/Projects/Paladin/paladin_engine/PaladinEngine/tests/test_resources/examples/validator/msgs.txt', 'r') as f:
        for msg in f.readlines():
            result = result & validate(msg)
    if result:
        print(':)')
    else:
        print(':(')


if __name__ == '__main__':
    main()
