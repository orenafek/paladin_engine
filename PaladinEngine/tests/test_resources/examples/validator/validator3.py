"""
__     __        _  _      _         _
\ \   / /  __ _ | |(_)  __| |  __ _ | |_   ___   _ __
 \ \ / /  / _` || || | / _` | / _` || __| / _ \ | '__|
  \ V /  | (_| || || || (_| || (_| || |_ | (_) || |
   \_/    \__,_||_||_| \__,_| \__,_| \__| \___/ |_|

This program validates a string sequence generated by another program.
The string should consist of messages, each be in the following format:
Message: <Magic |4|><Length|2|><Content|Length|>

The entire sequence is in the following format:
Sequence: <Message><Seperator><Message><Seperator>...<Message><Seperator><EndBarker><Entire Seq.Checksum>
"""

import hashlib
from collections import OrderedDict


def validate(s: str):
    chsms = OrderedDict()
    i = 0
    cursum = 0
    lchunk = ''
    while True:
        cntr = 4
        chunk = s[i:i + cntr]
        i += cntr

        if chunk == 'X@y$':
            continue

        if lchunk and lchunk != chunk:
            chsms[lchunk] = cursum
            cursum = 0

        if chunk == 'A#<B':
            break

        lchunk = chunk
        cntr = int(s[i] + s[i + 1])
        i += 2

        chunk = s[i: i + cntr]
        i += cntr

        c = 0xFFFF
        for char in chunk:
            c ^= ord(char)
            for _ in range(8):
                if c & 0x0001:
                    c >>= 1
                    c ^= 0xA001
                else:
                    c >>= 1
        cursum += c

    chunk = ''.join(map(str, chsms.values()))
    calc = hashlib.md5(chunk.encode()).hexdigest()
    f = ''.join([s[i + _] for _ in range(32)])

    return str(f) == str(calc)


def validate_input(s: str):
    if validate(s):
        print(':)')
    else:
        print(':(')


def main():
    s1 = 'aI6l04V1n3X@y$OZDy09hKLJpMAdHX@y$9roQ08UJ9rW3cXX@y$9roQ04odCuX@y$tTRc01aX@y$tTRc07WdTxjPFX@y$G7Q502tyX@y$A#<Bd0fe402fa086ed599f444dd02bf00226'
    validate_input(s1)
    s2 = 'tTRc02a8X@y$G7Q50372rX@y$G7Q503EQ8X@y$VfmG07dlekazXX@y$VfmG101sCPxvJpR9X@y$VfmG039m3X@y$G7Q503Jp2X@y$A#<B905ff7a943573da1b5219aa005452040'
    validate_input(s2)


if __name__ == '__main__':
    main()
